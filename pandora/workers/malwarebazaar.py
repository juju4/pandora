#!/usr/bin/env python3

import logging

from malwarebazaar.api import Bazaar

from ..helpers import Status
from ..task import Task
from ..report import Report

from .base import BaseWorker


class MalwareBazaar(BaseWorker):

    apikey: str

    def __init__(
        self,
        module: str,
        worker_id: int,
        cache: str,
        timeout: str,
        loglevel: int = logging.DEBUG,
        **options,
    ):
        super().__init__(module, worker_id, cache, timeout, loglevel, **options)
        if not self.apikey:
            self.disabled = True
            self.logger.warning("Disabled, missing apikey.")
            return
        self.client = Bazaar(self.apikey)

    def analyse(self, task: Task, report: Report, manual_trigger: bool = False):
        self.logger.debug(f"analysing file {task.file.path}...")
        try:
            result = self.client.query_hash(task.file.sha1)
        except Exception:
            report.status = Status.ERROR
            report.add_details("info", "Unable to reach malwarebazaar.")
            return

        if result["query_status"] == "hash_not_found":
            report.status = Status.NOTAPPLICABLE
            return

        # Hash is known so malicious
        report.status = Status.ALERT
        report.add_details(
            "permaurl", f"https://bazaar.abuse.ch/sample/{task.file.sha256}"
        )
        report.add_details(
            "malicious",
            {
                "signature": result["data"][0]["signature"],
                "tags": result["data"][0]["tags"],
            },
        )
